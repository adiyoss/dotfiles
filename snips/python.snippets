# print comment in box
snippet box "Box"
`!p snip.rv = '# ┌' + '─' * (len(t[1]) + 2) + '┐'`
# │ $1 │
`!p snip.rv = '# └' + '─' * (len(t[1]) + 2) + '┘'`
$0
endsnippet

# print statement
snippet pp "print()" A
print(f"$1")
$0
endsnippet

# logging
snippet lgi "logger.info()" A
logger.info(f"$1")
$0
endsnippet

snippet lgd "logger.debug()" A
logger.debug(f"$1")
$0
endsnippet

# insert break point
snippet bp "break point" A

import ipdb; ipdb.set_trace()
endsnippet

snippet ife "if-else statement" b
if ${1:condition}:
	${2:pass}
else:
	${0:else}
endsnippet

# lambda expression
snippet lbd "lambda expression" A
lambda ${1:input}: ${2:function}
endsnippet

# for range
snippet forrange "for range(n)" b
for ${1:i} in range(${2:n}):
	${0:pass}
endsnippet

snippet argparse "argparse object" b
parser = argparse.ArgumentParser(description=__doc__)
parser.add_argument('--${1:flag}', default=${2:None}, type=${3:str})
args = parser.parse_args()
$0
endsnippet

snippet argument "argparse argument" b
parser.add_argument('--${1:flag}', default=${2:None}, type=${3:str})
endsnippet

### PYTORCH ###
# import
snippet importtorch "import pytorch modules" bA
import torch
import torch.nn as nn
import torch.nn.functional as F
$0
endsnippet

# create tensor
snippet tensor "create tensor"
torch.Tensor($1)
$0
endsnippet

# create float tensor
snippet ftensor "create float tensor"
torch.FloatTensor($1)
$0
endsnippet

# create sequential
snippet tseq "create sequential"
nn.Sequential(
	$1,
	)
$0
endsnippet

snippet conv1d "create conv2d layer"
nn.Conv2d(in_channels=$1,
	      out_channels=$2,
	      kernel_size=$3,
	      stride=${4:1},
	      padding=${5:0})
endsnippet

snippet conv2d "create conv2d layer"
nn.Conv2d(in_channels=$1,
	      out_channels=$2,
	      kernel_size=$3,
	      stride=${4:1},
	      padding=${5:0})
endsnippet
